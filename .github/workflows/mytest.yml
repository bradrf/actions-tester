name: mytest
on:
  push:
    tags:
      - "v*.*.*-barf.*"

jobs:
  create:
    runs-on: ubuntu-latest
    outputs:
      release_url: ${{ steps.release.outputs.url }}
    steps:
      - id: release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: false

  build:
    needs: create

    strategy:
      matrix:
        os: [ubuntu-latest] #, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            release_suffix: ubuntu
          # - os: macos-latest
          #   release_suffix: mac
          # - os: windows-latest
          #   release_suffix: windows

    runs-on: ${{ matrix.os }}

    outputs:
      release_url: ${{ needs.create.outputs.release_url }}

    steps:
      - run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
        if: matrix.os == 'windows-latest'

      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16.13.2'
      - run: npm install -g yarn@1.22.10

      - name: Cache Desktop node_modules
        id: cache-desktop-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('package.json', 'yarn.lock', 'patches/**') }}
      - name: Install Desktop node_modules
        if: steps.cache-desktop-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - run: |
          copy package.json temp.json
          del package.json
          type temp.json | findstr /v certificateSubjectName | findstr /v certificateSha1 > package.json
        if: matrix.os == 'windows-latest'

      - run: yarn generate
      - run: echo "${{ matrix.os }}" > release/latest-${{ matrix.os }}.yml

      - uses: actions/upload-artifact@v3
        with:
          name: manifest
          path: release/latest*.yml

      - uses: softprops/action-gh-release@v1
        with:
          # fail_on_unmatched_files: true
          files: |
            release/*.dmg
            release/*.deb
            release/*.exe

  announce:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          nodetail: true
          title: "Released ${{ needs.build.outputs.release_url }}"
          # title: "${{ runner.os }} ${{ github.workflow }}"
