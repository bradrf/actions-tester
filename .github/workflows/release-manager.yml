name: Release Manager
on:
  # invoked from other workflows
  workflow_call:
    inputs:
      name:
        type: string
        required: true
      failed:
        type: boolean
        default: true
      release_env:
        type: string
      deploy_icon:
        type: string
      deploy_name:
        type: string
      deploy_link:
        type: string
    secrets:
      slack_webhook:
        required: true

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - run: echo '${{ inputs.release_env }}' | base64 -d >> $GITHUB_ENV

      - run: |
          echo SLACK_CHANNEL=devops-${{ env.RELEASE_KIND == 'production' && 'prd' || 'nonprd' }} >> $GITHUB_ENV
          echo SLACK_ICON='${{ inputs.deploy_icon }}' >> $GITHUB_ENV
          echo SLACK_USERNAME='${{ env.NAME }}' >> $GITHUB_ENV

      - if: '!inputs.failed'
        run: |
          echo SLACK_TITLE='Deployed ${{ inputs.deploy_name || inputs.name }} (${{ env.RELEASE_TITLE }})' >> $GITHUB_ENV
          echo SLACK_FOOTER='${{ inputs.deploy_link }}' >> $GITHUB_ENV
          echo MSG_MINIMAL=ref,commit >> $GITHUB_ENV

      # slack-notify doesn't extract a valid message body for tag pushes and results in a `null` shown
      # (the EOF syntax allows for multiline commit messages to be captured into the env variable)
      - if: "!inputs.failed && github.ref_type == 'tag'"
        run: |
          echo 'SLACK_MESSAGE<<EOF' >> $GITHUB_ENV
          git log -1 --pretty=format:%B ${{ github.sha }} >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - if: inputs.failed
        run: |
          echo SLACK_COLOR='#FF0000' >> $GITHUB_ENV
          echo SLACK_TITLE='Failed to deploy ${{ inputs.deploy_name }} (${{ env.RELEASE_TITLE }})' >> $GITHUB_ENV
          echo SLACK_FOOTER='Deployment failed!' >> $GITHUB_ENV

      - uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.slack_webhook }}

      - if: '!failed'
        run: |
          echo "### ${{ env.SLACK_TITLE }}! :ship:" >> $GITHUB_STEP_SUMMARY
          echo "- Log: ${{ env.DEPLOY_LOG }}" >> $GITHUB_STEP_SUMMARY
          echo "- Link: ${{ env.DEPLOY_LINK }}" >> $GITHUB_STEP_SUMMARY

  create-or-update:
    if: "!inputs.failed && needs.two.outputs.release_targets != ''"
    runs-on: ubuntu-latest
    steps:
      - run: echo '${{ inputs.release_env }}' | base64 -d >> $GITHUB_ENV

      - name: Setup environment variables
        run: |
          echo '${{ inputs.release_env }}' | base64 -d >> $GITHUB_ENV
          kind='${{ env.RELEASE_KIND }}';
          echo "REL_TITLE="${kind^}" release $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
          echo "REL_MESSAGE=Deployed [${{ inputs.deploy_name || inputs.name }}](${{ inputs.deploy_link }})" >> $GITHUB_ENV

      # must have git directory for gh to function
      - uses: actions/checkout@v3
      - name: Create or update ${{ env.RELEASE_TAG }}
        run: >-
          gh release create '${{ env.RELEASE_TAG }}' -t '${{ env.REL_TITLE }}' -n '* ${{ env.REL_MESSAGE }}'
          ||
          ( gh release view '${{ env.RELEASE_TAG }}' --json body -q .body ; echo '* ${{ env.REL_MESSAGE }}' )
          | gh release edit '${{ env.RELEASE_TAG }}' -F -
        env:
          GH_TOKEN: ${{ github.token }}

      - run: echo '### Released ${{ env.REL_TITLE }} (${{ env.RELEASE_TAG }}) :rocket:' >> $GITHUB_STEP_SUMMARY
